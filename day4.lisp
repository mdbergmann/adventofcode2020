(asdf:load-system :arrows)
(asdf:load-system :cl-ppcre)

(defpackage :day4
  (:use :cl :arrows))

(in-package :day4)

(defparameter *required-props*
  '("byr" "iyr" "eyr" "hgt" "hcl" "ecl" "pid"))

(defun input-to-alist (input)
  (labels ((split-into-lines (s) (ppcre:split "\\n\\n" s))
           (props-to-acons (props)
             (mapcar (lambda (prop-item)
                       (let ((comps (ppcre:split ":" prop-item)))
                         (cons (first comps) (second comps))))
                     props))
           (to-alist (lst)
             (mapcar (lambda (item)
                       (let ((props (ppcre:split "\\s" item)))
                         (props-to-acons props)))
                     lst)))
    (-> (uiop:read-file-string input)
        (split-into-lines)
        (to-alist))))

(defun get-aprop (prop list)
  (assoc prop list :test #'equalp))

(defun valid-byr-p (pass)
  (flet ((in-range-p (year)
           (if (and (>= year 1920) (<= year 2002))
               t
               nil)))
    (-<> (get-aprop "byr" pass)
         (cdr)
         (ppcre:scan-to-strings "\\d{4}" <>)
         (parse-integer)
         (in-range-p))))

(defun valid-hgt-p (pass)
  (flet ((scan-groups (hgt)
           (multiple-value-bind (match groups)
               (ppcre:scan-to-strings "(\\d{2,3})(.{2})" hgt)
             (declare (ignore match))
             groups))
         (in-range-p (scan-groups)
           (when (< (length scan-groups) 2)
             (return-from valid-hgt-p nil))
           (let ((height (parse-integer (elt scan-groups 0)))
                 (metric (elt scan-groups 1)))
             (when (or (null height) (null metric))
               (return-from valid-hgt-p nil))
             (cond
               ((string= "in" metric)
                (if (and (>= height 59) (<= height 76))
                    t
                    nil))
               ((string= "cm" metric)
                (if (and (>= height 150) (<= height 193))
                    t
                    nil))
               (t nil)))))
    (-> (get-aprop "hgt" pass)
        (cdr)
        (scan-groups)
        (in-range-p))))

(defun valid-pass-p (pass)
  (every (lambda (prop)
           (member prop (mapcar #'car pass) :test #'equalp))
         *required-props*))

(defun day4-1 ()
  (-<> (input-to-alist "input/day4.txt")
       (mapcar #'valid-pass-p <>)
       (remove-if #'null <>)
       (length)))

(defun test-input ()
  (let ((input-list (input-to-alist "input/day4.txt")))
    (assert (listp input-list))
    (print (first input-list))
    (assert (listp (first input-list)))
    (print (get-aprop "hgt" (first input-list)))
    (assert (string= "177cm" (cdr (get-aprop "hgt" (first input-list)))))
    (assert (valid-pass-p (first input-list)))
    input-list))
